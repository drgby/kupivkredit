<?php
/**
 * Этот файл является частью библиотеки КупиВкредит.
 *
 * Все права защищены (c) 2012 «Тинькофф Кредитные Системы» Банк (закрытое акционерное общество)
 *
 * Информация о типе распространения данного ПО указана в файле LICENSE,
 * распространяемого вместе с исходным кодом библиотеки.
 *
 * This file is part of the KupiVkredit library.
 *
 * Copyright (c) 2012  «Tinkoff Credit Systems» Bank (closed joint-stock company)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Kupivkredit\Response;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-21 at 11:40:33.
 */
class ResponseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected function prepareResponse($status, $code, $eng, $rus, $result)
    {
        $response = new SimpleXMLElement('<?xml version="1.0"?><response></response>');
        $response->addChild('status', $status);
        $response->addChild('statusCode', $code);

        if (is_array($result)) {
            $resultXML = $response->addChild('result');
            foreach ($result as $key => $value) {
                $resultXML->addChild($key, $value);
            }
        } else {
            $response->addChild('result', $result);
        }

        $messages = $response->addChild('messages');

        $messages->addChild('eng', $eng);
        $messages->addChild('rus', $rus);

        return new Response($response->asXML());
    }

    public function simple()
    {
        return array(
            array(Response::STATUS_FAILED, 1010, 'Test', 'Тест', 'Test'),
            array(Response::STATUS_SUCCESS, null, 'Test', 'Тест', 'Test'),
            array('TestStatus', '1010', 123, 123, 123),
            array(Response::STATUS_SUCCESS, 1010, 'Test', 'Тест', array('value' => 1, 'values' => 2)),
        );
    }

    /**
     * @covers Kupivkredit\Response::getMessage
     * @dataProvider simple
     */
    public function testGetMessage($status, $code, $eng, $rus, $result)
    {
        $object = $this->prepareResponse($status, $code, $eng, $rus, $result);

        $getEng = $object->getMessage(Response::LANGUAGE_ENG);
        $getRus = $object->getMessage(Response::LANGUAGE_RUS);

        $this->assertInternalType('string', $getEng);
        $this->assertInternalType('string', $getRus);

        $this->assertEquals($eng, $getEng);
        $this->assertEquals($rus, $getRus);
    }

    /**
     * @covers Kupivkredit\Response::getResult
     * @dataProvider simple
     */
    public function testGetResult($status, $code, $eng, $rus, $result)
    {
        $object = $this->prepareResponse($status, $code, $eng, $rus, $result);

        $getResult = $object->getResult();

        $this->assertInstanceOf('SimpleXMLElement', $getResult);

        if (is_array($result)) {
            $resultXML = new SimpleXMLElement('<result></result>');
            foreach ($result as $key => $value) {
                $resultXML->addChild($key, $value);
            }
            $this->assertEquals($resultXML, $getResult);
        } else {
            $this->assertEquals(new SimpleXMLElement("<result>$result</result>"), $getResult);
        }
    }

    /**
     * @covers Kupivkredit\Response::getStatus
     * @dataProvider simple
     */
    public function testGetStatus($status, $code, $eng, $rus, $result)
    {
        $object = $this->prepareResponse($status, $code, $eng, $rus, $result);

        $getStatus = $object->getStatus();

        $this->assertInternalType('string', $status);
        $this->assertEquals($status, $getStatus);
    }

    /**
     * @covers Kupivkredit\Response::getStatusCode
     * @dataProvider simple
     */
    public function testGetStatusCode($status, $code, $eng, $rus, $result)
    {
        $object = $this->prepareResponse($status, $code, $eng, $rus, $result);

        $getCode = $object->getStatusCode();

        if (!is_null($getCode)) {
            $this->assertInternalType('integer', $getCode);
        }

        $this->assertEquals($code, $getCode);
    }

    /**
     * @covers Kupivkredit\Response::isSucceed
     * @dataProvider simple
     */
    public function testIsSucceed($status, $code, $eng, $rus, $result)
    {
        $object = $this->prepareResponse($status, $code, $eng, $rus, $result);
        $succeed = $object->isSucceed();

        $this->assertInternalType('boolean', $succeed);
        $this->assertEquals(($status == Response::STATUS_SUCCESS), $succeed);
    }
}
