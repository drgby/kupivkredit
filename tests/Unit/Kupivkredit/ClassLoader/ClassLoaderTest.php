<?php
/**
 * Этот файл является частью библиотеки КупиВкредит.
 *
 * Все права защищены (c) 2012 «Тинькофф Кредитные Системы» Банк (закрытое акционерное общество)
 *
 * Информация о типе распространения данного ПО указана в файле LICENSE,
 * распространяемого вместе с исходным кодом библиотеки.
 *
 * This file is part of the KupiVkredit library.
 *
 * Copyright (c) 2012  «Tinkoff Credit Systems» Bank (closed joint-stock company)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Kupivkredit\ClassLoader\ClassLoader;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-21 at 11:40:33.
 */
class ClassLoaderTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ClassLoader
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ClassLoader();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kupivkredit\ClassLoader::register
     */
    public function testRegisterNamespace()
    {
	    $before = count($this->object->getNamespaces());

	    $this->object->registerNamespace('KupivkreditTest', __DIR__);
	    $namespaces = $this->object->getNamespaces();

	    $this->assertArrayHasKey('KupivkreditTest', $namespaces);
	    $this->assertEquals(($before + 1), count($namespaces));
    }

	/**
	 * @covers Kupivkredit\ClassLoader::register
	 * @expectedException Kupivkredit\ClassLoader\Exception\ClassLoaderException
	 */
	public function testRegisterNamespaceException()
	{
		$duplicate = 'SomeNamespace';
		$this->object->registerNamespace($duplicate, '...');
		$this->object->registerNamespace($duplicate, '...');
	}

    /**
     * @covers Kupivkredit\ClassLoader::loadClass
     */
    public function testLoadClass()
    {
	    $class = 'KupivkreditTest\Test\TestClass';

	    $this->object->registerNamespace('KupivkreditTest', __DIR__);
	    $result = $this->object->loadClass($class);

	    $this->assertTrue($result);
	    $this->assertTrue(class_exists($class));
    }

	/**
	 * @covers Kupivkredit\ClassLoader::loadClass
	 */
	public function testLoadClassFalse()
	{
		$class = 'KupivkreditTest\Test\TestClassNotExists';

		$this->object->registerNamespace('KupivkreditTest', __DIR__);
		$result = $this->object->loadClass($class);

		$this->assertFalse($result);
		$this->assertFalse(class_exists($class));
	}

    /**
     * @covers Kupivkredit\ClassLoader::findFile
     */
    public function testFindFile()
    {
	    $class = 'KupivkreditTest\Test\TestClass';

	    $this->object->registerNamespace('KupivkreditTest', __DIR__);
	    $file = $this->object->findFile($class);

	    $this->assertInternalType('string', $file);
	    $this->assertTrue(is_file($file));
    }

	/**
	 * @covers Kupivkredit\ClassLoader::findFile
	 */
	public function testFindFileFalse()
	{
		$class = 'KupivkreditTest\Test\TestClassNotExists';

		$this->object->registerNamespace('KupivkreditTest', __DIR__);
		$file = $this->object->findFile($class);

		$this->assertInternalType('boolean', $file);
		$this->assertFalse($file);
		$this->assertFalse(is_file($file));
	}

    /**
     * @covers Kupivkredit\ClassLoader::registerAutoload
     */
    public function testRegisterAutoload()
    {
	    $this->object->registerNamespace(uniqid(), __DIR__);
	    $this->object->registerAutoload();

		$registered = array($this->object, 'loadClass');
	    $functions  = spl_autoload_functions();

	    $this->assertTrue(in_array($registered, $functions, true));
    }

    /**
     * @covers Kupivkredit\ClassLoader::unregisterAutoload
     */
    public function testUnregisterAutoload()
    {
	    $this->object->registerNamespace(uniqid(), __DIR__);
	    $this->object->registerAutoload();

	    $registered = array($this->object, 'loadClass');
	    $functions  = spl_autoload_functions();

	    $this->assertTrue(in_array($registered, $functions, true));

	    $this->object->unregisterAutoload();

	    $functions = spl_autoload_functions();

	    $this->assertFalse(in_array($registered, $functions, true));
    }
}
